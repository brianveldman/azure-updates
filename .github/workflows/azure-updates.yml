# .github/workflows/azure-updates.yml
name: Azure Updates Collector

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  collect-updates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install axios xml2js moment
        
    - name: Fetch and generate
      run: |
        node -e "
        const axios = require('axios');
        const xml2js = require('xml2js');
        const fs = require('fs');
        const moment = require('moment');

        async function main() {
          console.log('Fetching Azure Updates...');
          
          const sources = [
            { name: 'Azure Updates', url: 'https://www.microsoft.com/releasecommunications/api/v2/azure/rss', type: 'rss' },
            { name: 'Azure Architecture', url: 'https://learn.microsoft.com/en-us/azure/architecture/feed.atom', type: 'atom' },
            { name: 'Azure Status', url: 'https://azure.status.microsoft/status/feed/', type: 'rss' },
            { name: 'Azure Blog', url: 'https://azure.microsoft.com/en-us/blog/feed/', type: 'rss' }
          ];

          let allUpdates = [];
          
          for (const source of sources) {
            try {
              console.log(\`Fetching from \${source.name}...\`);
              const response = await axios.get(source.url, { timeout: 30000, headers: { 'User-Agent': 'Azure Updates Collector' } });
              
              const parser = new xml2js.Parser();
              const result = await parser.parseStringPromise(response.data);
              
              let items = [];
              if (source.type === 'rss' && result.rss && result.rss.channel && result.rss.channel[0].item) {
                items = result.rss.channel[0].item;
              } else if (source.type === 'atom' && result.feed && result.feed.entry) {
                items = result.feed.entry;
              }
              
              const updates = items.map(item => {
                let title, link, description, pubDate;
                
                if (source.type === 'rss') {
                  title = item.title && item.title[0] ? item.title[0] : 'No title';
                  link = item.link && item.link[0] ? item.link[0] : '';
                  description = item.description && item.description[0] ? item.description[0] : '';
                  pubDate = item.pubDate && item.pubDate[0] ? new Date(item.pubDate[0]) : new Date();
                } else {
                  title = item.title && item.title[0] && item.title[0]._ ? item.title[0]._ : (item.title && item.title[0] ? item.title[0] : 'No title');
                  link = item.link && item.link[0] && item.link[0].$ && item.link[0].$.href ? item.link[0].$.href : '';
                  description = item.summary && item.summary[0] && item.summary[0]._ ? item.summary[0]._ : (item.summary && item.summary[0] ? item.summary[0] : '');
                  pubDate = item.updated && item.updated[0] ? new Date(item.updated[0]) : new Date();
                }
                
                return { title, link, description, pubDate, source: source.name };
              });
              
              allUpdates = allUpdates.concat(updates);
              console.log(\`Found \${updates.length} updates from \${source.name}\`);
              
            } catch (error) {
              console.error(\`Error fetching from \${source.name}:\`, error.message);
            }
          }
          
          allUpdates.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
          allUpdates = allUpdates.slice(0, 100);
          
          console.log(\`Total updates collected: \${allUpdates.length}\`);
          
          // Create docs directory
          if (!fs.existsSync('docs')) fs.mkdirSync('docs');
          
          // Generate HTML
          const lastUpdated = moment().format('YYYY-MM-DD HH:mm:ss UTC');
          const getBadgeClass = (source) => source.toLowerCase().replace(/\s+/g, '-');
          
          const html = \`<!DOCTYPE html>
<html lang=\"en\">
<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>Azure Updates Dashboard</title>
    <link href=\"style.css\" rel=\"stylesheet\">
</head>
<body>
    <div class=\"header\">
        <div class=\"container\">
            <div class=\"row align-items-center\">
                <div class=\"col-md-8\">
                    <h1><i class=\"fab fa-microsoft\"></i> Azure Updates Dashboard</h1>
                    <p class=\"mb-0\">Updates from official Azure sources every 6 hours</p>
                </div>
                <div class=\"col-md-4 text-md-end\">
                    <small>Last updated: \${lastUpdated}</small>
                </div>
            </div>
        </div>
    </div>

    <div class=\"container\">
        <div class=\"row mb-4\">
            <div class=\"col-md-3\">
                <div class=\"stats-card\">
                    <h3><i class=\"fas fa-newspaper\"></i></h3>
                    <h4>\${allUpdates.length}</h4>
                    <p class=\"mb-0\">Total Updates</p>
                </div>
            </div>
            <div class=\"col-md-3\">
                <div class=\"stats-card\">
                    <h3><i class=\"fas fa-rss\"></i></h3>
                    <h4>4</h4>
                    <p class=\"mb-0\">Active Sources</p>
                </div>
            </div>
            <div class=\"col-md-3\">
                <div class=\"stats-card\">
                    <h3><i class=\"fas fa-clock\"></i></h3>
                    <h4>6 Hours</h4>
                    <p class=\"mb-0\">Update Interval</p>
                </div>
            </div>
            <div class=\"col-md-3\">
                <div class=\"stats-card\">
                    <h3><i class=\"fas fa-sync-alt\"></i></h3>
                    <h4>Auto</h4>
                    <p class=\"mb-0\">Refresh</p>
                </div>
            </div>
        </div>

        <div class=\"filter-section\">
            <div class=\"row align-items-center\">
                <div class=\"col-md-6\">
                    <input type=\"text\" id=\"searchInput\" class=\"form-control search-box\" placeholder=\"🔍 Search updates...\">
                </div>
                <div class=\"col-md-6\">
                    <select id=\"sourceFilter\" class=\"form-select\">
                        <option value=\"\">All sources</option>
                        <option value=\"Azure Updates\">Azure Updates</option>
                        <option value=\"Azure Architecture\">Azure Architecture</option>
                        <option value=\"Azure Status\">Azure Status</option>
                        <option value=\"Azure Blog\">Azure Blog</option>
                    </select>
                </div>
            </div>
        </div>

        <div id=\"updatesContainer\">
            \${allUpdates.map(update => {
              const badgeClass = getBadgeClass(update.source);
              const formattedDate = moment(update.pubDate).format('MMM DD, YYYY');
              const shortDesc = update.description.substring(0, 200) + (update.description.length > 200 ? '...' : '');
              
              return \`<div class=\"update-card mb-3\" data-source=\"\${update.source}\">
                <div class=\"card-body\">
                    <div class=\"row\">
                        <div class=\"col-md-9\">
                            <h5><a href=\"\${update.link}\" target=\"_blank\" class=\"text-decoration-none\">\${update.title}</a></h5>
                            <p class=\"text-muted\">\${shortDesc}</p>
                        </div>
                        <div class=\"col-md-3 text-md-end\">
                            <span class=\"source-badge \${badgeClass} mb-2\">\${update.source}</span><br>
                            <small class=\"date-text\"><i class=\"far fa-calendar\"></i> \${formattedDate}</small>
                        </div>
                    </div>
                </div>
              </div>\`;
            }).join('')}
        </div>

        <div class=\"text-center mt-4\">
            <small class=\"text-muted\">
                This dashboard is automatically updated every 6 hours via GitHub Actions.<br>
                <a href=\"https://github.com/brianveldman/azure-updates\" target=\"_blank\" class=\"github-link\">
                    <i class=\"fab fa-github\"></i> View on GitHub
                </a>
            </small>
        </div>
    </div>

    <script>
        document.getElementById('searchInput').addEventListener('input', filterUpdates);
        document.getElementById('sourceFilter').addEventListener('change', filterUpdates);

        function filterUpdates() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const sourceFilter = document.getElementById('sourceFilter').value;
            const cards = document.querySelectorAll('.update-card');

            cards.forEach(card => {
                const title = card.querySelector('h5').textContent.toLowerCase();
                const description = card.querySelector('p').textContent.toLowerCase();
                const source = card.getAttribute('data-source');

                const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
                const matchesSource = !sourceFilter || source === sourceFilter;

                card.style.display = (matchesSearch && matchesSource) ? 'block' : 'none';
            });
        }
    </script>
</body>
</html>\`;
          
          fs.writeFileSync('docs/index.html', html);
          fs.writeFileSync('docs/updates.json', JSON.stringify(allUpdates, null, 2));
          
          console.log('Files generated successfully!');
        }

        main().catch(console.error);
        "
        
    - name: Commit and push
      run: |
        git config --local user.email "${{ github.actor }}@users.noreply.github.com"
        git config --local user.name "${{ github.actor }}"
        git add docs/
        git diff --staged --quiet || git commit -m "Update Azure updates - $(date +'%Y-%m-%d %H:%M:%S')"
        git push

  deploy:
    needs: collect-updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
