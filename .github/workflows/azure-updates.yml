# .github/workflows/azure-updates.yml
name: Azure Updates Collector

on:
  schedule:
    # Runs every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  collect-updates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Node.js dependencies
      run: |
        npm init -y
        npm install axios xml2js fs-extra moment
        
    - name: Setup dependencies
      run: |
        # Create assets directory
        mkdir -p docs/assets/css docs/assets/js docs/assets/fonts
        
        # Download Bootstrap CSS
        curl -o docs/assets/css/bootstrap.min.css https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css
        
        # Download Bootstrap JS
        curl -o docs/assets/js/bootstrap.bundle.min.js https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js
        
        # Download Font Awesome CSS
        curl -o docs/assets/css/fontawesome.min.css https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css
        
        # Download Font Awesome fonts
        curl -o docs/assets/fonts/fa-solid-900.woff2 https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/webfonts/fa-solid-900.woff2
        curl -o docs/assets/fonts/fa-regular-400.woff2 https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/webfonts/fa-regular-400.woff2
        curl -o docs/assets/fonts/fa-brands-400.woff2 https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/webfonts/fa-brands-400.woff2
        
        # Fix Font Awesome font paths
        sed -i 's|https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/webfonts/|../fonts/|g' docs/assets/css/fontawesome.min.css
        
    - name: Fetch Azure Updates
      run: |
        cat > fetch-updates.js << 'EOF'
        const axios = require('axios');
        const xml2js = require('xml2js');
        const fs = require('fs-extra');
        const moment = require('moment');

        async function fetchAzureUpdates() {
          console.log('Fetching Azure Updates...');
          
          const sources = [
            {
              name: 'Azure Updates',
              url: 'https://www.microsoft.com/releasecommunications/api/v2/azure/rss',
              type: 'rss'
            },
            {
              name: 'Azure Architecture',
              url: 'https://learn.microsoft.com/en-us/azure/architecture/feed.atom',
              type: 'atom'
            },
            {
              name: 'Azure Status',
              url: 'https://azure.status.microsoft/status/feed/',
              type: 'rss'
            },
            {
              name: 'Azure Landing Zones',
              url: 'https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/feed.atom',
              type: 'atom'
            }
          ];

          let allUpdates = [];
          
          for (const source of sources) {
            try {
              console.log(`Fetching from ${source.name}...`);
              const response = await axios.get(source.url, {
                timeout: 30000,
                headers: {
                  'User-Agent': 'Azure Updates Collector'
                }
              });
              
              const parser = new xml2js.Parser();
              const result = await parser.parseStringPromise(response.data);
              
              let items = [];
              
              if (source.type === 'rss' && result.rss && result.rss.channel && result.rss.channel[0].item) {
                items = result.rss.channel[0].item;
              } else if (source.type === 'atom' && result.feed && result.feed.entry) {
                items = result.feed.entry;
              }
              
              const updates = items.map(item => {
                let title, link, description, pubDate;
                
                if (source.type === 'rss') {
                  title = item.title && item.title[0] ? item.title[0] : 'No title';
                  link = item.link && item.link[0] ? item.link[0] : '';
                  description = item.description && item.description[0] ? item.description[0] : '';
                  pubDate = item.pubDate && item.pubDate[0] ? new Date(item.pubDate[0]) : new Date();
                } else if (source.type === 'atom') {
                  title = item.title && item.title[0] && item.title[0]._ ? item.title[0]._ : 
                         (item.title && item.title[0] ? item.title[0] : 'No title');
                  link = item.link && item.link[0] && item.link[0].$ && item.link[0].$.href ? 
                         item.link[0].$.href : '';
                  description = item.summary && item.summary[0] && item.summary[0]._ ? item.summary[0]._ :
                               (item.summary && item.summary[0] ? item.summary[0] : '');
                  pubDate = item.updated && item.updated[0] ? new Date(item.updated[0]) : new Date();
                }
                
                return {
                  title: title,
                  link: link,
                  description: description,
                  pubDate: pubDate,
                  source: source.name
                };
              });
              
              allUpdates = allUpdates.concat(updates);
              console.log(`Found ${updates.length} updates from ${source.name}`);
              
            } catch (error) {
              console.error(`Error fetching from ${source.name}:`, error.message);
            }
          }
          
          // Sort by date (newest first)
          allUpdates.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
          
          // Take last 100 updates
          allUpdates = allUpdates.slice(0, 100);
          
          console.log(`Total updates collected: ${allUpdates.length}`);
          
          // Generate HTML and CSS files
          const html = generateHTML(allUpdates);
          const css = generateCSS();
          
          // Ensure docs directory exists
          await fs.ensureDir('docs');
          
          // Write HTML file
          await fs.writeFile('docs/index.html', html);
          
          // Write CSS file
          await fs.writeFile('docs/style.css', css);
          
          // Write JSON data
          await fs.writeFile('docs/updates.json', JSON.stringify(allUpdates, null, 2));
          
          console.log('Files generated successfully!');
        }

        function generateCSS() {
          return `/* Font Awesome Icons */
@font-face {
  font-family: "Font Awesome 6 Free";
  font-style: normal;
  font-weight: 900;
  src: url("assets/fonts/fa-solid-900.woff2") format("woff2");
}

@font-face {
  font-family: "Font Awesome 6 Free";
  font-style: normal;
  font-weight: 400;
  src: url("assets/fonts/fa-regular-400.woff2") format("woff2");
}

@font-face {
  font-family: "Font Awesome 6 Brands";
  font-style: normal;
  font-weight: 400;
  src: url("assets/fonts/fa-brands-400.woff2") format("woff2");
}

.fas, .fa-solid {
  font-family: "Font Awesome 6 Free";
  font-weight: 900;
}

.far, .fa-regular {
  font-family: "Font Awesome 6 Free";
  font-weight: 400;
}

.fab, .fa-brands {
  font-family: "Font Awesome 6 Brands";
  font-weight: 400;
}

.fas::before, .far::before, .fab::before,
.fa-solid::before, .fa-regular::before, .fa-brands::before {
  display: inline-block;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
}

/* Icon definitions */
.fa-microsoft::before { content: "\\f3ca"; }
.fa-newspaper::before { content: "\\f1ea"; }
.fa-rss::before { content: "\\f09e"; }
.fa-clock::before { content: "\\f017"; }
.fa-sync-alt::before { content: "\\f2f1"; }
.fa-calendar::before { content: "\\f073"; }
.fa-github::before { content: "\\f09b"; }
.fa-search::before { content: "\\f002"; }

/* Main Styles */
body {
    background-color: #f8f9fa;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
}

.header {
    background: linear-gradient(135deg, #0078d4, #005a9e);
    color: white;
    padding: 2rem 0;
    margin-bottom: 2rem;
}

.update-card {
    transition: transform 0.2s;
    border-left: 4px solid #0078d4;
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    background-color: white;
}

.update-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.card-body {
    padding: 1rem;
}

.source-badge {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-weight: 600;
}

.source-badge.azure-updates {
    background-color: #0078d4 !important;
    color: white !important;
}

.source-badge.azure-architecture {
    background-color: #28a745 !important;
    color: white !important;
}

.source-badge.azure-status {
    background-color: #ffc107 !important;
    color: #000 !important;
}

.source-badge.azure-landing-zones {
    background-color: #6f42c1 !important;
    color: white !important;
}

.date-text {
    color: #6c757d;
    font-size: 0.875rem;
}

.filter-section {
    background: white;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.search-box {
    border-radius: 25px;
    border: 1px solid #ced4da;
    padding: 0.375rem 0.75rem;
}

.search-box:focus {
    border-color: #0078d4;
    box-shadow: 0 0 0 0.2rem rgba(0, 120, 212, 0.25);
}

.stats-card {
    background: linear-gradient(45deg, #0078d4, #40e0d0);
    color: white;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    text-align: center;
}

.feature-highlight {
    background: #e3f2fd;
    border-left: 4px solid #2196f3;
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 0 8px 8px 0;
}

.github-link {
    color: #6c757d;
    text-decoration: none;
}

.github-link:hover {
    color: #0078d4;
}

.btn {
    border-radius: 0.375rem;
    padding: 0.375rem 0.75rem;
    font-weight: 400;
    line-height: 1.5;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    border: 1px solid transparent;
    cursor: pointer;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-control, .form-select {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #212529;
    background-color: #fff;
    background-image: none;
    border: 1px solid #ced4da;
    border-radius: 0.375rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-control:focus, .form-select:focus {
    color: #212529;
    background-color: #fff;
    border-color: #86b7fe;
    outline: 0;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

/* Bootstrap Grid System */
.container {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
    max-width: 1140px;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -15px;
    margin-left: -15px;
}

.col-md-3, .col-md-4, .col-md-6, .col-md-8, .col-md-9, .col-12 {
    position: relative;
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
}

@media (min-width: 768px) {
    .col-md-3 { flex: 0 0 25%; max-width: 25%; }
    .col-md-4 { flex: 0 0 33.333333%; max-width: 33.333333%; }
    .col-md-6 { flex: 0 0 50%; max-width: 50%; }
    .col-md-8 { flex: 0 0 66.666667%; max-width: 66.666667%; }
    .col-md-9 { flex: 0 0 75%; max-width: 75%; }
    .text-md-end { text-align: right !important; }
}

.col-12 { flex: 0 0 100%; max-width: 100%; }

/* Utility Classes */
.mb-0 { margin-bottom: 0 !important; }
.mb-2 { margin-bottom: 0.5rem !important; }
.mb-3 { margin-bottom: 1rem !important; }
.mb-4 { margin-bottom: 1.5rem !important; }
.mt-4 { margin-top: 1.5rem !important; }
.mt-5 { margin-top: 3rem !important; }

.text-center { text-align: center !important; }
.text-muted { color: #6c757d !important; }
.text-decoration-none { text-decoration: none !important; }

.align-items-center { align-items: center !important; }

@media (max-width: 768px) {
    .header {
        padding: 1rem 0;
    }
    
    .stats-card {
        margin-bottom: 0.5rem;
    }
    
    .filter-section {
        padding: 0.75rem;
    }
    
    .update-card .col-md-3 {
        margin-top: 1rem;
    }
    
    .row {
        margin-right: -10px;
        margin-left: -10px;
    }
    
    .col-md-3, .col-md-4, .col-md-6, .col-md-8, .col-md-9, .col-12 {
        padding-right: 10px;
        padding-left: 10px;
    }
}`;
        }

        function generateHTML(updates) {
          const lastUpdated = moment().format('YYYY-MM-DD HH:mm:ss UTC');
          
          function getBadgeClass(source) {
            return source.toLowerCase().replace(/\s+/g, '-');
          }
          
          return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Azure Updates Dashboard</title>
    <link href="style.css" rel="stylesheet">
</head>
<body>
    <div class="header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1><i class="fab fa-microsoft"></i> Azure Updates Dashboard</h1>
                    <p class="mb-0">Updates from official Azure sources every 6 hours</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <small>Last updated: ${lastUpdated}</small>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Stats Overview -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stats-card">
                    <h3><i class="fas fa-newspaper"></i></h3>
                    <h4>${updates.length}</h4>
                    <p class="mb-0">Total Updates</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <h3><i class="fas fa-rss"></i></h3>
                    <h4>4</h4>
                    <p class="mb-0">Active Sources</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <h3><i class="fas fa-clock"></i></h3>
                    <h4>6 Hours</h4>
                    <p class="mb-0">Update Interval</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <h3><i class="fas fa-sync-alt"></i></h3>
                    <h4>Auto</h4>
                    <p class="mb-0">Refresh</p>
                </div>
            </div>
        </div>

        <div class="filter-section">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <input type="text" id="searchInput" class="form-control search-box" 
                           placeholder="🔍 Search updates...">
                </div>
                <div class="col-md-6">
                    <select id="sourceFilter" class="form-select">
                        <option value="">All sources</option>
                        <option value="Azure Updates">Azure Updates</option>
                        <option value="Azure Architecture">Azure Architecture</option>
                        <option value="Azure Status">Azure Status</option>
                        <option value="Azure Landing Zones">Azure Landing Zones</option>
                    </select>
                </div>
            </div>
        </div>

        <div id="updatesContainer">
            ${updates.map((update, index) => `
                <div class="update-card mb-3" data-source="${update.source}">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-9">
                                <h5>
                                    <a href="${update.link}" target="_blank" class="text-decoration-none">
                                        ${update.title}
                                    </a>
                                </h5>
                                <p class="text-muted">${update.description.substring(0, 200)}${update.description.length > 200 ? '...' : ''}</p>
                            </div>
                            <div class="col-md-3 text-md-end">
                                <span class="source-badge ${getBadgeClass(update.source)} mb-2">${update.source}</span><br>
                                <small class="date-text">
                                    <i class="far fa-calendar"></i> 
                                    ${moment(update.pubDate).format('MMM DD, YYYY')}
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('')}
        </div>

        <div class="text-center mt-4">
            <small class="text-muted">
                This dashboard is automatically updated every 6 hours via GitHub Actions.<br>
                <a href="https://github.com/brianveldman/azure-updates" target="_blank" class="github-link">
                    <i class="fab fa-github"></i> View on GitHub
                </a>
            </small>
        </div>
    </div>

    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', filterUpdates);
        document.getElementById('sourceFilter').addEventListener('change', filterUpdates);

        function filterUpdates() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const sourceFilter = document.getElementById('sourceFilter').value;
            const cards = document.querySelectorAll('.update-card');

            cards.forEach(card => {
                const title = card.querySelector('h5').textContent.toLowerCase();
                const description = card.querySelector('p').textContent.toLowerCase();
                const source = card.getAttribute('data-source');

                const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
                const matchesSource = !sourceFilter || source === sourceFilter;

                if (matchesSearch && matchesSource) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // Show update count in real-time
        function updateStats() {
            const visibleCards = document.querySelectorAll('.update-card[style*="block"], .update-card:not([style*="none"])').length;
            const totalCards = document.querySelectorAll('.update-card').length;
            
            if (visibleCards !== totalCards) {
                document.querySelector('.stats-card h4').textContent = visibleCards + '/' + totalCards;
            } else {
                document.querySelector('.stats-card h4').textContent = totalCards;
            }
        }

        // Update stats when filtering
        document.getElementById('searchInput').addEventListener('input', updateStats);
        document.getElementById('sourceFilter').addEventListener('change', updateStats);
    </script>
</body>
</html>`;
        }

        fetchAzureUpdates().catch(console.error);
        EOF
        
        node fetch-updates.js
        
    - name: Commit and push changes
      run: |
        git config --local user.email "brianveldmanict@outlook.com"
        git config --local user.name "Brian Veldman"
        git add docs/
        git diff --staged --quiet || git commit -m "Update Azure updates - $(date +'%Y-%m-%d %H:%M:%S')"
        git push

  deploy:
    needs: collect-updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
