# .github/workflows/azure-updates.yml
name: Azure Updates Collector

on:
  schedule:
    # Runs every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  collect-updates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Node.js dependencies
      run: |
        npm init -y
        npm install axios xml2js fs-extra moment
        
    - name: Fetch Azure Updates
      run: |
        cat > fetch-updates.js << 'SCRIPT_END'
        const axios = require('axios');
        const xml2js = require('xml2js');
        const fs = require('fs-extra');
        const moment = require('moment');

        async function fetchAzureUpdates() {
          console.log('Fetching Azure Updates...');
          
          const sources = [
            {
              name: 'Azure Updates',
              url: 'https://www.microsoft.com/releasecommunications/api/v2/azure/rss',
              type: 'rss'
            },
            {
              name: 'Azure Architecture',
              url: 'https://learn.microsoft.com/en-us/azure/architecture/feed.atom',
              type: 'atom'
            },
            {
              name: 'Azure Status',
              url: 'https://azure.status.microsoft/status/feed/',
              type: 'rss'
            },
            {
              name: 'Azure Blog',
              url: 'https://azure.microsoft.com/en-us/blog/feed/',
              type: 'rss'
            }
          ];

          let allUpdates = [];
          
          for (const source of sources) {
            try {
              console.log(`Fetching from ${source.name}...`);
              const response = await axios.get(source.url, {
                timeout: 30000,
                headers: {
                  'User-Agent': 'Azure Updates Collector'
                }
              });
              
              const parser = new xml2js.Parser();
              const result = await parser.parseStringPromise(response.data);
              
              let items = [];
              
              if (source.type === 'rss' && result.rss && result.rss.channel && result.rss.channel[0].item) {
                items = result.rss.channel[0].item;
              } else if (source.type === 'atom' && result.feed && result.feed.entry) {
                items = result.feed.entry;
              }
              
              const updates = items.map(item => {
                let title, link, description, pubDate;
                
                if (source.type === 'rss') {
                  title = item.title && item.title[0] ? item.title[0] : 'No title';
                  link = item.link && item.link[0] ? item.link[0] : '';
                  description = item.description && item.description[0] ? item.description[0] : '';
                  pubDate = item.pubDate && item.pubDate[0] ? new Date(item.pubDate[0]) : new Date();
                } else if (source.type === 'atom') {
                  title = item.title && item.title[0] && item.title[0]._ ? item.title[0]._ : 
                         (item.title && item.title[0] ? item.title[0] : 'No title');
                  link = item.link && item.link[0] && item.link[0].$ && item.link[0].$.href ? 
                         item.link[0].$.href : '';
                  description = item.summary && item.summary[0] && item.summary[0]._ ? item.summary[0]._ :
                               (item.summary && item.summary[0] ? item.summary[0] : '');
                  pubDate = item.updated && item.updated[0] ? new Date(item.updated[0]) : new Date();
                }
                
                return {
                  title: title,
                  link: link,
                  description: description,
                  pubDate: pubDate,
                  source: source.name
                };
              });
              
              allUpdates = allUpdates.concat(updates);
              console.log(`Found ${updates.length} updates from ${source.name}`);
              
            } catch (error) {
              console.error(`Error fetching from ${source.name}:`, error.message);
            }
          }
          
          // Sort by date (newest first)
          allUpdates.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
          
          // Take last 100 updates
          allUpdates = allUpdates.slice(0, 100);
          
          console.log(`Total updates collected: ${allUpdates.length}`);
          
          // Generate HTML file using template
          await generateHTML(allUpdates);
          
          // Write JSON data
          await fs.writeFile('docs/updates.json', JSON.stringify(allUpdates, null, 2));
          
          console.log('Files generated successfully!');
        }

        async function generateHTML(updates) {
          const lastUpdated = moment().format('YYYY-MM-DD HH:mm:ss UTC');
          
          // Check if template exists, if not create a simple one
          let template;
          try {
            template = await fs.readFile('docs/template.html', 'utf8');
          } catch (error) {
            console.log('Template not found, creating simple HTML...');
            // Fallback to simple HTML generation
            const html = generateSimpleHTML(updates, lastUpdated);
            await fs.writeFile('docs/index.html', html);
            return;
          }
          
          // Replace placeholders
          template = template.replace('{{LAST_UPDATED}}', lastUpdated);
          template = template.replace('{{TOTAL_UPDATES}}', updates.length);
          
          // Generate updates HTML
          const updatesHTML = updates.map(update => {
            const badgeClass = update.source.toLowerCase().replace(/\s+/g, '-');
            const formattedDate = moment(update.pubDate).format('MMM DD, YYYY');
            const shortDescription = update.description.substring(0, 200) + (update.description.length > 200 ? '...' : '');
            
            return `
                <div class="update-card mb-3" data-source="${update.source}">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-9">
                                <h5>
                                    <a href="${update.link}" target="_blank" class="text-decoration-none">
                                        ${update.title}
                                    </a>
                                </h5>
                                <p class="text-muted">${shortDescription}</p>
                            </div>
                            <div class="col-md-3 text-md-end">
                                <span class="source-badge ${badgeClass} mb-2">${update.source}</span><br>
                                <small class="date-text">
                                    <i class="far fa-calendar"></i> ${formattedDate}
                                </small>
                            </div>
                        </div>
                    </div>
                </div>`;
          }).join('');
          
          // Replace updates placeholder
          template = template.replace('{{UPDATES_CONTENT}}', updatesHTML);
          
          // Write final HTML
          await fs.writeFile('docs/index.html', template);
        }

        function generateSimpleHTML(updates, lastUpdated) {
          function getBadgeClass(source) {
            return source.toLowerCase().replace(/\s+/g, '-');
          }
          
          return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Azure Updates Dashboard</title>
    <link href="style.css" rel="stylesheet">
</head>
<body>
    <div class="header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1><i class="fab fa-microsoft"></i> Azure Updates Dashboard</h1>
                    <p class="mb-0">Updates from official Azure sources every 6 hours</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <small>Last updated: ${lastUpdated}</small>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Stats Overview -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stats-card">
                    <h3><i class="fas fa-newspaper"></i></h3>
                    <h4>${updates.length}</h4>
                    <p class="mb-0">Total Updates</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <h3><i class="fas fa-rss"></i></h3>
                    <h4>4</h4>
                    <p class="mb-0">Active Sources</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <h3><i class="fas fa-clock"></i></h3>
                    <h4>6 Hours</h4>
                    <p class="mb-0">Update Interval</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card">
                    <h3><i class="fas fa-sync-alt"></i></h3>
                    <h4>Auto</h4>
                    <p class="mb-0">Refresh</p>
                </div>
            </div>
        </div>

        <div class="filter-section">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <input type="text" id="searchInput" class="form-control search-box" 
                           placeholder="🔍 Search updates...">
                </div>
                <div class="col-md-6">
                    <select id="sourceFilter" class="form-select">
                        <option value="">All sources</option>
                        <option value="Azure Updates">Azure Updates</option>
                        <option value="Azure Architecture">Azure Architecture</option>
                        <option value="Azure Status">Azure Status</option>
                        <option value="Azure Blog">Azure Blog</option>
                    </select>
                </div>
            </div>
        </div>

        <div id="updatesContainer">
            ${updates.map((update, index) => `
                <div class="update-card mb-3" data-source="${update.source}">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-9">
                                <h5>
                                    <a href="${update.link}" target="_blank" class="text-decoration-none">
                                        ${update.title}
                                    </a>
                                </h5>
                                <p class="text-muted">${update.description.substring(0, 200)}${update.description.length > 200 ? '...' : ''}</p>
                            </div>
                            <div class="col-md-3 text-md-end">
                                <span class="source-badge ${getBadgeClass(update.source)} mb-2">${update.source}</span><br>
                                <small class="date-text">
                                    <i class="far fa-calendar"></i> 
                                    ${moment(update.pubDate).format('MMM DD, YYYY')}
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('')}
        </div>

        <div class="text-center mt-4">
            <small class="text-muted">
                This dashboard is automatically updated every 6 hours via GitHub Actions.<br>
                <a href="https://github.com/brianveldman/azure-updates" target="_blank" class="github-link">
                    <i class="fab fa-github"></i> View on GitHub
                </a>
            </small>
        </div>
    </div>

    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', filterUpdates);
        document.getElementById('sourceFilter').addEventListener('change', filterUpdates);

        function filterUpdates() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const sourceFilter = document.getElementById('sourceFilter').value;
            const cards = document.querySelectorAll('.update-card');

            cards.forEach(card => {
                const title = card.querySelector('h5').textContent.toLowerCase();
                const description = card.querySelector('p').textContent.toLowerCase();
                const source = card.getAttribute('data-source');

                const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
                const matchesSource = !sourceFilter || source === sourceFilter;

                if (matchesSearch && matchesSource) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }
    </script>
</body>
</html>`;
        }

        fetchAzureUpdates().catch(console.error);
        SCRIPT_END
        
        node fetch-updates.js
        
    - name: Commit and push changes
      run: |
        git config --local user.email "${{ github.actor }}@users.noreply.github.com"
        git config --local user.name "${{ github.actor }}"
        git add docs/
        git diff --staged --quiet || git commit -m "Update Azure updates - $(date +'%Y-%m-%d %H:%M:%S')"
        git push

  deploy:
    needs: collect-updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
